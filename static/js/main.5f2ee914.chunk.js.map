{"version":3,"sources":["Component/Product.js","Component/Products.js","Component/AddingProduct.js","App.js","serviceWorker.js","index.js"],"names":["Product","props","this","title","desc","React","Component","Products","state","productsInfo","list","keys","Object","localStorage","n","length","push","JSON","parse","getItem","setState","map","pro","AddingProduct","AddProduct","console","log","setItem","id","stringify","Date","now","pro_img","className","type","placeholder","onChange","e","target","value","row","cols","onClick","App","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qUAQeA,E,qKALJC,GACH,OAAQ,6BAAK,4BAAKC,KAAKD,MAAME,OAAW,4BAAKD,KAAKD,MAAMG,W,GAF1CC,IAAMC,WCyBbC,E,kDAxBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,aAAa,CAAC,CAACN,MAAM,QAAQC,KAAK,gBAClC,CAACD,MAAM,SAASC,KAAK,mBAJX,E,gEAUd,IAFA,IAAIM,EAAK,YAAIR,KAAKM,MAAMC,cACpBE,EAAKC,OAAOD,KAAKE,cAAcC,EAAEH,EAAKI,OAAS,EAC3CD,GACJJ,EAAKM,KAAKC,KAAKC,MAAML,aAAaM,QAAQR,EAFK,MAGnDT,KAAKkB,SAAS,CAACX,aAAaC,M,+BAG5B,OACI,6BACKR,KAAKM,MAAMC,aAAaY,KAAI,SAAAC,GAAG,OAC5B,kBAAC,EAAD,CAASnB,MAAOmB,EAAInB,MAAOC,KAAMkB,EAAIlB,e,GAnBlCE,a,OCwCRiB,G,wDAvCX,WAAYtB,GAAO,IAAD,8BACd,cAAMA,IAQVuB,WAAa,WACTC,QAAQC,IAAI,EAAKlB,OACjBK,aAAac,QAAQ,WAAW,EAAKnB,MAAMoB,GAAGX,KAAKY,UAAU,EAAKrB,QAClE,EAAKY,SAAL,2BAAkB,EAAKZ,OAAvB,IAA6BoB,GAAGE,KAAKC,UAVrC,EAAKvB,MAAM,CACPoB,GAAGE,KAAKC,MACR5B,MAAM,GACNC,KAAK,GACL4B,QAAQ,IANE,E,qDAcT,IAAD,OACJ,OACI,6BACI,0BAAMC,UAAU,cACZ,6BACA,2BACI,kDAA8B,6BAAK,2BAAOC,KAAK,OAAOC,YAAY,0BAClEC,SAAW,SAACC,GAAM,EAAKjB,SAAL,2BAAkB,EAAKZ,OAAvB,IAA6BL,MAAMkC,EAAEC,OAAOC,aAElE,2BACI,kDAA8B,6BAAK,2BAAOL,KAAK,OAAQC,YAAY,2DACnEC,SAAW,SAACC,GAAM,EAAKjB,SAAL,2BAAkB,EAAKZ,OAAvB,IAA6BwB,QAAQK,EAAEC,OAAOC,aAEpE,2BACI,wDAAoC,6BAAK,8BAAUC,IAAI,KAAKC,KAAK,KAAKR,UAAU,OAAOE,YAAY,mCACnGC,SAAW,SAACC,GAAM,EAAKjB,SAAL,2BAAkB,EAAKZ,OAAvB,IAA6BJ,KAAKiC,EAAEC,OAAOC,aAEjE,6BACA,4BAAQG,QAASxC,KAAKsB,YAAtB,qB,GAjCQnB,IAAMC,YCoBnBqC,MAjBf,WACE,OACE,yBAAKV,UAAU,OACb,6BACE,4BACE,4BAAI,8CACJ,4BAAI,4CAGR,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAYW,SAAS,KACrB,kBAAC,IAAD,CAAOC,KAAK,YAAYC,UAAWvC,OCJrBwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.5f2ee914.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Product extends React.Component{\r\n    render(props){\r\n        return (<div><h1>{this.props.title}</h1><h2>{this.props.desc}</h2></div>);\r\n    }\r\n}\r\n\r\nexport default Product;","import React,{Component} from 'react';\r\nimport Product from \"./Product\";\r\nclass Products extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            productsInfo:[{title:\"Phone\",desc:\"Apple Iphone\"},\r\n            {title:\"Phone2\",desc:\"Apple Iphone2\"}]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        let list=[...this.state.productsInfo];\r\n        var keys=Object.keys(localStorage),n=keys.length,i=0;\r\n        while(i<n)\r\n            list.push(JSON.parse(localStorage.getItem(keys[i])));\r\n        this.setState({productsInfo:list});\r\n    }\r\n    render(){\r\n        return (\r\n            <div>\r\n                {this.state.productsInfo.map(pro=>\r\n                    <Product title={pro.title} desc={pro.desc}></Product>)}\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Products;","import React from 'react';\r\nimport './style.css';\r\nclass AddingProduct extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            id:Date.now(),\r\n            title:'',\r\n            desc:'',\r\n            pro_img:''\r\n        }\r\n    }\r\n    AddProduct = () =>{\r\n        console.log(this.state);\r\n        localStorage.setItem('product-'+this.state.id,JSON.stringify(this.state));\r\n        this.setState({...this.state,id:Date.now()});\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form className=\"AddProduct\">\r\n                    <br/>\r\n                    <p>\r\n                        <label>Product Title  </label><br/><input type=\"text\" placeholder=\"Enter The Product Title\"\r\n                        onChange={ (e) =>{this.setState({...this.state,title:e.target.value})}}></input>\r\n                    </p>\r\n                    <p>\r\n                        <label>Product Image  </label><br/><input type=\"text\"  placeholder=\"Enter The Source (Ex:https://www.google.com/webhp?hl...)\"\r\n                        onChange={ (e) =>{this.setState({...this.state,pro_img:e.target.value})}}></input>\r\n                    </p>\r\n                    <p>\r\n                        <label>Product Description  </label><br/><textarea row=\"10\" cols=\"50\" className=\"desc\" placeholder=\"Enter The Description Of Product\"\r\n                        onChange={ (e) =>{this.setState({...this.state,desc:e.target.value})}}/>\r\n                    </p>\r\n                    <br/>\r\n                    <button onClick={this.AddProduct}>ADD PRODUCT</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddingProduct;","import React from 'react';\nimport './App.css';\nimport { HashRouter, Route} from 'react-router-dom';\nimport Products from './Component/Products';\nimport AddingProduct from './Component/AddingProduct';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav>\n        <ul>\n          <li><button>Home Page</button></li>\n          <li><button>Admin</button></li>\n        </ul>\n      </nav>\n      <AddingProduct></AddingProduct>\n      <HashRouter basename='/'>\n      <Route path=\"/homepage\" component={Products}></Route>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}